// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BibleServerClient is the client API for BibleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BibleServerClient interface {
	GetVerses(ctx context.Context, in *GetVersesRequest, opts ...grpc.CallOption) (*GetVersesResponse, error)
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (*ListBooksResponse, error)
}

type bibleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBibleServerClient(cc grpc.ClientConnInterface) BibleServerClient {
	return &bibleServerClient{cc}
}

func (c *bibleServerClient) GetVerses(ctx context.Context, in *GetVersesRequest, opts ...grpc.CallOption) (*GetVersesResponse, error) {
	out := new(GetVersesResponse)
	err := c.cc.Invoke(ctx, "/bibleserver.BibleServer/GetVerses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bibleServerClient) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (*ListBooksResponse, error) {
	out := new(ListBooksResponse)
	err := c.cc.Invoke(ctx, "/bibleserver.BibleServer/ListBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BibleServerServer is the server API for BibleServer service.
// All implementations must embed UnimplementedBibleServerServer
// for forward compatibility
type BibleServerServer interface {
	GetVerses(context.Context, *GetVersesRequest) (*GetVersesResponse, error)
	ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error)
	mustEmbedUnimplementedBibleServerServer()
}

// UnimplementedBibleServerServer must be embedded to have forward compatible implementations.
type UnimplementedBibleServerServer struct {
}

func (UnimplementedBibleServerServer) GetVerses(context.Context, *GetVersesRequest) (*GetVersesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerses not implemented")
}
func (UnimplementedBibleServerServer) ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBibleServerServer) mustEmbedUnimplementedBibleServerServer() {}

// UnsafeBibleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BibleServerServer will
// result in compilation errors.
type UnsafeBibleServerServer interface {
	mustEmbedUnimplementedBibleServerServer()
}

func RegisterBibleServerServer(s grpc.ServiceRegistrar, srv BibleServerServer) {
	s.RegisterService(&BibleServer_ServiceDesc, srv)
}

func _BibleServer_GetVerses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServerServer).GetVerses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bibleserver.BibleServer/GetVerses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServerServer).GetVerses(ctx, req.(*GetVersesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BibleServer_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BibleServerServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bibleserver.BibleServer/ListBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BibleServerServer).ListBooks(ctx, req.(*ListBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BibleServer_ServiceDesc is the grpc.ServiceDesc for BibleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BibleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bibleserver.BibleServer",
	HandlerType: (*BibleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVerses",
			Handler:    _BibleServer_GetVerses_Handler,
		},
		{
			MethodName: "ListBooks",
			Handler:    _BibleServer_ListBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
